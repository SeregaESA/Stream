package Hibernate;

public class Hibernate {

// Entity - должны быть POJO и помечен аннотацией Entity
//          1. Все поля private (не final);
//          2. get и set для всех полей;
//          3. Конструктор без паррамеров (и далее делаем с параметрами);
//          4. toString, eguals, hashCode
//          5. Должен иметь первичный ключ (@Id). Должен реалзовывать Serialasibl

// Что бы не писать всё в ручную используем lombok:
//   1. @Data
//   2. @NoArgsConstructor
//   3. @AllArgsConstructor
//   4. @Builder
//
// Session - объект этого класса служит непосредственно для выполнения запросов к БД и содержит методы:
//   1. save - созранение сущности session.save(user). Под капотом метода save создаётся SQL запрос insert
//   2. update - session.update(user). Под капотом метода update создаётся SQL запрос update. Если сущность в БД не
//               найдена, выбросится исключение
//   3. saveOrUpdate - session.saveOrUpdate(user). Перед применением делается select запрос. Если user не найден, то
//                     то происходит save, если найден update
//   4. delete - session.delete(user). Удаление сущности по идентификатору. Перед применением делается select запрос.
//               Если user не найден, то происходит delete. Exception не выбрасывается при отсутствии сущности
//   5. get - session.get(User.class, "id"). Получение сущности по идентификатору. Происходит select запрос
//
//----------------------------------------------------------------------------------------------------------------------
//
// PersistenceContext
//
// Кэш первого уровня (First Level Cache) - по умолчанию persistenceContext. В основе лежит ассоциативный массив, Есть для каждой сессии. При запросе, сущность кэшируется и
// при повторном обращении к этой сущности Hibernate возьмёт уже ёё из кэша. Объект появляется в кэшэ тольок после
// обращения к БД (вызов методов save, update, get и т.д.)
//
// Что бы удалить сущность из persistenceContext есть методы:
//   1. session.evict(user) - удалит user из кэша сессии
//   2. session.clear() - очистка всего кэша
//   3. session.close() - после закрытия сессии происходит очистка кэша
//
// При изменении полей сущности, когда она получена при вызове метода get (лежит в persistenceContext нашей session) и
// закрытии транзакции, Hibernate автоматически вызовет метод update и сохранит изменения в БД
//
// session.flush() - сливает наш кэш первого уровня (синхранезирует) в БД.
//
}
