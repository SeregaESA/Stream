package Algoritm;

public class BigONotation {

// Асимптотическое время выполнения - эта хар описывает то, как алгоритм работает на очень больших аргументах и этого
//                                    достаточно, что бы отличить эффективный алгоритм от неэффективного
// Асимптотика - поведение функции при стремлении аргумента к бесконечности
//
// Асимптотическая оценка алгоритмов (Большая О) по убыванию:
// O(log n) - логорефмическое время. Самая эффективная оценка
// О(n) - линейное время. эффективная оценка. max n = 10 в 9 степени
// О(n * log n) - эффективные алгоритмы сортировки (быстрая сортировка). max n = 10 в 7.5 степени
// О(n^2) - медленные алгоритмы сортировки (сортировка выбором). max n = 10 в 4.5 степени
// O(n!) - факториальное время. самая плохая и неприминимая на практике. max n = 30
//
// Правила использования "Большого О":
//   1. Константы игнорируются (не учитыаются железо ПК, операционная система, язык програмирования и т.д)
//   2. В вырожениях учитываем самую быстрорастущую функцию (потому что при очень большом n только она и будет играть
//      существенную роль)
//   3. Основание логорифма не пишем (так как они отличаются друг от друга на константу)
//
// Приимущества использования "Большого О":
//   1. Легче сравнивать (более читаемая запись). При этом можно пожертвовать точностью, так как чаще всего нас
//      интересует только то, как себя ведет алгоритм при увеличении аргумента
//   2. Сама запись становится проще (3n^2 + 5n + 2 или O(n^2))
//   3. Не думаем о деталях (не учитыаются железо ПК, операционная система, язык програмирования и т.д, так как
//      они являются константами и не зависят от аргументов)
//
// Минусы использования "Большого О":
//   1. Теряем информацию о константах
//   2. Большое О - это только асимптотическая оценка. Мы не узнаем время выполнения на конкретных значениях, мы узнаем
//      то, как ведет себя алгоритм при очень больших аргументах.
//
}
