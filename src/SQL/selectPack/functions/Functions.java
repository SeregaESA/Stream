package SQL.selectPack.functions;

public class Functions {

// LOWER(s) - в параметрах принимает строку или текст и делает все буквы маленькие
// Пример: select lower(name) from user; выведет все имена маленькими буквами

// UPPER(s) - в параметрах принимает строку или текст и делает все буквы заглавные
// Пример: select upper(name) from user; выведет все имена заглавными буквами

// INITCAP(s) - в параметрах принимает строку или текст и в каждом слове первую букву делает заглавной, остальные проп.
// Пример: select initcap(name) from user;

//---------------------------------------------------------------------------
// Функции с текстом
//
// Параметры: s - строка, n - конечная длинна текста, р - тескт для заполнения, trimstring - текст, который надо срезать.

// CONCAT(s,s) - слаживает строки

// LENGTH(s) - вычисляет длинну строки
// Пример: select length(name) from user; выведи длинну имен из табл. user

// LPAD(s,n,p) - добавляет в левую часть символы. Если указать длинну меньше строки, строка уменьшется с конца
// Пример: select lpad('Kira', 7, '$') from user; вывод $$$Kira

// RPAD(s,n,p) - добавляет в правую часть символы
// Пример: select rpad('Kira', 7, '$') from user; вывод Kira$$$

// TRIM ({trailing | leading | both} trimstring from s) - удаляет символ из указанного текста.
//       trailing - удаление с конца текста;
//       leading - удаление с начала текста;
//       both - удаление и с начала и с конца текста;
//       trimstring - текст, который надо срезать;
//       from s - откуда надо срезать;
// Пример: select trim(trailing 'a' from model) from cars; выведи и удали в конце 'a' с колонки model табл. user
// Пример: select trim(both ' ' from model) from cars; удаление пробелов с начала и конца.
// Пример: select trim(from model) from cars; такая запись по умолчанию значит, удалить пробелы с начала и конца

// INSTR(s, search string, start position, Nth occurrence); находит позицию искомого текста в строке
//       s - строка, текст
//       search string - искомый текст
//       start position - позиция для начала работы (необязательно)
//       Nth occurrence - N-ое появление
// Пример: select * from users where instr(email, '3') = 5; instr возвращает позицию на которой в строке email находится
//                                                          '3'
//
// SUBSTR(s, start position, number of character); изымает и возвращает отрывок из текста
//       start position - позиция для начала работы
//       number of character - колличество символов (необязательно)
// Пример: select email, substr(email,5) from users; вывести email и email c 5 позиции.
// Пример: select email, substr(email,5, 3) from users; вывести email и email c 5 позиции 3 элемента
// Пример: select email, substr(email, -5) from users; если указываем отрицательное число, то отчет идет с конца
//
// REPLACE(s, search item, replace item); - заменить
//       search item - искомый элемент
//       replace item - заменяющий элемент (необязательно в зависимости от СУБД)
// Пример: select replace(email, 'ru', 'com') from users; выведи и поменяй в email ru на com
// Пример: select replace(email, 'u', 'ZZZ') from users; выведи и поменяй все u на ZZZ
//
//---------------------------------------------------------------------------------------------
// Функции с числами
//
// ROUND(n, precision) - производит округление
//       n - число (может быть отрицательным)
//       precision - точность округления
// Пример: select round(3.54) from dual; Если не указывать второй парраметр, то произойдёт математическое округление
// Пример: select round(3.545674, 2) from dual; Вывод будет 3.55. Второй парраметр указывает, сколько цифр после запятой
// Пример: select round(1362.345, -2) from dual; Вывод 1400. Если второй парраметр отрицательный, то отчет идёт от
//                                               запятой влево и значения меняются на 0 с округлением
// Пример: select name, round(car_id * 2.156732, 3) from users;
//
// TRUNC(n, precision) - оставляет укзанное коллисчество цифр после запятой без округления. Меняется в зависимости от СУБД
// Пример: select truncate(1362.345, 2) from dual; Вывод 1362.34
// Пример: select truncate(11362.345, -2) from dual; Вывод 11300. Если второй пар. отриц., то от запятой в левую часть
//                                                   на указанное значение поставятся 0
//
// MOD(dividend, divisor) - выводит остаток отделения
//      dividend - делимое (могут быть отрицательными)
//      divisor - делитель (могут быть отрицательными)
// Пример: select mod(7,3) from dual; Вывод 1.
//
//-----------------------------------------------------------------------------------------
//
// Фунукции с датами - реализации смотреть в зависимости от СУБД
//
// SYSDATE - возвращает время и дату часового пояса, где находится сервер. При орифметических операциях с датой
// (Date с date нельзя), будут добавляться/удаляться дни. Возможность проведения таких операций зависит от СУБД.
// Пример: select sysdate() from dual; Вывод: 2025-04-11 10:57:24
// Пример: select sysdate(5) from dual; Вывод: 2025-04-11 11:03:26.72009
//
// MONTHS_BETWEEN(start_date, end_date); сколько месяц между датами (наличие зависит от СУБД)
//       start_date - дата "с"
//       end_date - дата "по"
//
// LAST_DAY - вернёт последнюю дату месяца
// Пример: select last_day(sysdate()) from dual;
//
//
//
//
}
